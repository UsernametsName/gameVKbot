import random
from vkbottle.bot import BotLabeler, rules, Message
from vkbottle_types.objects import UsersUserFull
from vkbottle.bot import rules

from database.requests import get_resources, buy_chicken
from keyboards import k_main, k_Market


private_labeler = BotLabeler()




@private_labeler.private_message(command="start")
async def start_command(message: Message):
    user: UsersUserFull = (await message.ctx_api.users.get(message.from_id))[0]
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è üòä.\n–≠—Ç–æ –∏–≥—Ä–∞ —Ñ–µ—Ä–º–∞ üéÆüöú, –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç—ã üëà —Å–º–æ–∂–µ—à—å —Ä–∞–∑–≤–∏—Ç—å —Å–≤–æ—ë –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ üè≠üìà.üéâ", keyboard=k_main)
    resources = await get_resources(user.id)
    await message.answer(f"‚≠ê–ò–º—è: {user.first_name} {user.last_name}\n"
                            "‚ö°–£—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã: 1\n"
                            f"üí∏–î–µ–Ω—å–≥–∏: {resources["coin"]}\n"
                            "üåê–ú–µ—Å—Ç–æ –ø–æ –º–∏—Ä—É: 1 ")


@private_labeler.private_message(payload={"btn_menu": "profile"})
async def profile_handler(message: Message):
    user: UsersUserFull = (await message.ctx_api.users.get(message.from_id))[0]
    resources = await get_resources(user.id)
    await message.answer(f"‚≠ê–ò–º—è: {user.first_name} {user.last_name}\n"
                            "‚ö°–£—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã: 1\n"
                            f"üí∏–î–µ–Ω—å–≥–∏: {resources["coin"]}\n"
                            "üåê–ú–µ—Å—Ç–æ –ø–æ –º–∏—Ä—É: 1 ")
    
@private_labeler.private_message(payload={"btn_menu": "storage"})
async def storage_handler(message: Message):
    user: UsersUserFull = (await message.ctx_api.users.get(message.from_id))[0]
    resources = await get_resources(user.id)
    
    mess="‚ö°–¢–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã:\n"
    for key,value in resources.items():
        mess+=f" {key}: {value} {random.choice(("‚õµ","üçπ","üçñ","ü•ê","ü•ì"))}\n"
    await message.answer(mess) 

@private_labeler.private_message(payload={"btn_menu": "shop"})
async def shop_handler(message: Message):
    await message.answer("–ú–∞–≥–∞–∑–∏–Ω: ",keyboard=k_Market)

@private_labeler.private_message(payload={"btn_market":"buy_chicken"})
async def chickenBuy_handler(message: Message):
    user: UsersUserFull = (await message.ctx_api.users.get(message.from_id))[0]
    resources = await get_resources(user.id)
    if resources["coin"] >= 300:
        buy_chicken(user.id)
        await message.answer("–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥")

@private_labeler.private_message(payload={"btn_market":"buy_chicken"})
async def chickenBuy_handler(message: Message):
    user: UsersUserFull = (await message.ctx_api.users.get(message.from_id))[0]
    resources = await get_resources(user.id)
    if resources["coin"] >= 300:
        await message.answer("–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥")
@private_labeler.private_message(payload={"btn_market":"buy_cow"})
async def chickenBuy_handler(message: Message):
    user: UsersUserFull = (await message.ctx_api.users.get(message.from_id))[0]
    resources = await get_resources(user.id)
    if resources["coin"] >= 500:
        await message.answer("–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥")
